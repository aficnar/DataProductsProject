summary(lm1)
set.seed(333)
inTrain <- createDataPartition(y=faithful$waiting, p=0.5, list=FALSE)
trainFaith <- faithful[inTrain,]
testFaith <- faithful[-inTrain,]
lm1 <- lm(eruptions ~ waiting,data=trainFaith)
summary(lm1)
plot(lm1)
plot(lm1,1)
plot(lm1,2)
plot(finMod,1,pch=19,cex=0.5,col="#00000010")
library(devtools)
install.packages("devtools")
library(devtools)
find_rtools()
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
require(datasets); data(swiss); require(GGally); require(ggplot2)
g = ggpairs(swiss, lower = list(continuous = "smooth"),params = c(method = "loess"))
g
pairs(swiss, panel = panel.smooth, main = "Swiss data", col = 3 + (swiss$Catholic > 50))
?relevel
data(iris)
library(ggplot2)
library(caret)
names(iris)
table(iris$Species)
inTrain <- createDataPartition(y=iris$Species,p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training)
qplot(Petal.Width,Sepal.Width,colour=Species,data=training)
modFit <- train(Species ~ .,method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
library(rattle)
library(rattle)
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot
fancyRpartPlot(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
modFit <- train(Species ~ .,method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
fancyRpartPlot(modFit$finalModel)
data(iris)
library(ggplot2)
library(caret)
names(iris)
table(iris$Species)
inTrain <- createDataPartition(y=iris$Species,p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training)
qplot(Petal.Width,Sepal.Width,colour=Species,data=training)
modFit <- train(Species ~ .,method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
library(rattle)
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
install.packages("GTK+")
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(ozone,package="ElemStatLearn")
ozone <- ozone[order(ozone$ozone),]
head(ozone)
dim(ozone)
ozone[111,]
ozone[111,]
loess
loess()
?loess
ll <- matrix(NA,nrow=10,ncol=155)
ss <- sample(1:dim(ozone)[1],replace=T)
head(ss)
head(ss,20)
ss <- sample(1:dim(ozone)[1],replace=T)
head(ss,20)
ss <- sample(1:dim(ozone)[1],replace=T)
head(ss,10)
ozone0 <- ozone[ss,]
ozone0 <- ozone0[order(ozone0$ozone),]
head(ozone0)
ozone0 <- ozone[ss,]
ozone0 <- ozone0[order(ozone0$ozone),]
head(ozone0)
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
loess0
summary(loess0)
lltemp <- predict(loess0,newdata=data.frame(ozone=1:155))
head(lltemp)
for(i in 1:10){
ss <- sample(1:dim(ozone)[1],replace=T)
ozone0 <- ozone[ss,]
ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
plot(ozone$ozone,ozone$temperature,pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
lines(1:155,apply(ll,2,mean),col="red",lwd=2)
library(caret)
predictors = data.frame(ozone=ozone$ozone)
temperature = ozone$temperature
treebag <- bag(predictors, temperature, B = 10,
bagControl = bagControl(fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate))
treebag <- bag(predictors, temperature, B = 10,
bagControl = bagControl(fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate))
predictors = data.frame(ozone=ozone$ozone)
temperature = ozone$temperature
ctreeBag$fit
install.packages("party")
treebag <- bag(predictors, temperature, B = 10,
bagControl = bagControl(fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate))
plot(ozone$ozone,temperature,col='lightgrey',pch=19)
points(ozone$ozone,predict(treebag$fits[[1]]$fit,predictors),pch=19,col="red")
points(ozone$ozone,predict(treebag,predictors),pch=19,col="blue")
ctreeBag$fit
ctreeBag
ctreeBag$fit
head(lltemp)
lltemp[10,]
lltemp[10]
lltemp[1:10]
lltemp[80:90]
data(iris)
library(ggplot2)
library(caret)
inTrain <- createDataPartition(y=iris$Species,p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
modFit <- train(Species~ .,data=training,method="rf",prox=TRUE)
modFit
library(randomForest)
summary(modFit)
modFit
getTree(modFit$finalModel,k=2)
getTree(modFit$finalModel,k=2)
getTree(modFit$finalModel,k=2)
getTree(modFit$finalModel,k=2,labelVar = TRUE)
getTree(modFit$finalModel,k=2,labelVar = TRUE)
getTree(modFit$finalModel,k=200,labelVar = TRUE)
getTree(modFit$finalModel,k=501,labelVar = TRUE)
getTree(modFit$finalModel,k=50,labelVar = TRUE)
getTree(modFit$finalModel,k=500,labelVar = TRUE)
modFit
getTree(modFit$finalModel,k=2,labelVar = TRUE)
data(iris)
library(ggplot2)
library(caret)
set.seed(1000)
inTrain <- createDataPartition(y=iris$Species,p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
modFit <- train(Species~ .,data=training,method="rf",prox=TRUE)
modFit
getTree(modFit$finalModel,k=2,labelVar = TRUE)
getTree(modFit$finalModel,k=20,labelVar = TRUE)
getTree(modFit$finalModel,k=3,labelVar = TRUE)
getTree(modFit$finalModel,k=30,labelVar = TRUE)
getTree(modFit$finalModel,k=36,labelVar = TRUE)
irisP <- classCenter(training[,c(3,4)], training$Species, modFit$finalModel$prox)
irisP <- as.data.frame(irisP)
irisP$Species <- rownames(irisP)
p <- qplot(Petal.Width, Petal.Length, col=Species,data=training)
p + geom_point(aes(x=Petal.Width,y=Petal.Length,col=Species),size=5,shape=4,data=irisP)
irisP <- classCenter(training[,c(3,4)], training$Species, modFit$finalModel$prox)
irisP
pred <- predict(modFit,testing)
testing$predRight <- pred==testing$Species
table(pred,testing$Species)
qplot(Petal.Width,Petal.Length,colour=predRight,data=testing,main="newdata Predictions")
library(ISLR); data(Wage); library(ggplot2); library(caret);
Wage <- subset(Wage,select=-c(logwage))
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
modFit <- train(wage ~ ., method="gbm",data=training,verbose=FALSE)
install.packages("gbm")
library(ISLR); data(Wage); library(ggplot2); library(caret);
Wage <- subset(Wage,select=-c(logwage))
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
modFit <- train(wage ~ ., method="gbm",data=training,verbose=FALSE)
print(modFit)
qplot(predict(modFit,testing),wage,data=testing)
data(mtcars)
head(mtcars)
?lm
fit <- lm(mpg ~ cyl + wt)
fit <- lm(mpg ~ cyl + wt, data = mtcars)
summary(fit)
fit <- lm(mpg ~ as.factor(cyl) + wt, data = mtcars)
summary(fit)
fit <- lm(mpg ~ cyl + wt, data = mtcars)
summary(fit)
1.5078*4
fit1 <- lm(mpg ~ as.factor(cyl) + wt, data = mtcars)
fit2 <- lm(mpg ~ as.factor(cyl), data = mtcars)
fit1$coeff
summary(fit1)$coeff
summary(fit2)$coeff
fit <- lm(mpg ~ as.factor(cyl) + wt, data=mtcars)
fit3 <- lm(mpg ~ as.factor(cyl)*wt, data=mtcars)
anova(fit, fit3, test="Chi")
fit <0 lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
fit <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
summary(fit)
?hatvalues
hatvalues(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
?dfbeta
?dfbetas
dfbetas(fit)
fit <- lm(y~x)
dfbetas(fit)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
data <- segmentationOriginal
set.seed(125)
head(data)
inTrain <- data$Case == "Train"
trainData <- data[inTrain, ]
testData <- data[!inTrain, ]
names(data)
cartModel <- train(Class ~ ., data=trainData, method="rpart")
cartModel$finalModel
plot(cartModel$finalModel, uniform=T)
text(cartModel$finalModel, cex=0.8)
predict(cartModel,newdata=data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2))
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
treeModel <- train(Area ~ ., data=olive, method="rpart2")
treeModel
newdata <- as.data.frame(t(colMeans(olive)))
predict(treeModel, newdata) # 2.875
treeModel <- train(Area ~ ., data=olive, method="rpart")
treeModel <- train(Area ~ ., data=olive, method="rpart2")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
logitModel <- train(chd ~ age + alcohol + obesity + tobacco +
typea + ldl, data=trainSA, method="glm",
family="binomial")
logitModel
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predictTrain <- predict(logitModel, trainSA)
predictTest <- predict(logitModel, testSA)
missClass(trainSA$chd, predictTrain)
missClass(testSA$chd, predictTest)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modelRf <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
install.packages("randomForest")
library(randomForest)
modelRf <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
order(varImp(modelRf), decreasing=T)
library(maps)
data(us.cities)
head(us.cities)
dim(us.cities)
map("state", "New Jersey")
map.cities(us.cities, country="NJ")
install.packages("ggmap")
library(ggmap)
qmap('Liverpool')
qmap('OX2 0ET')
map <- qmap('United States', zoom = 12, maptype = 'hybrid')
map
map <- qmap('United States', zoom = 1, maptype = 'hybrid')
map
myLocation <- "University of Washington”
q
qedqd
d
2
myLoc <- "University of Washington"
myLoc <- "University of Washington"
myMap <- get_map(location=myLocation,
q
q
crop = FALSE)
myMap <- get_map(location = myLoc, source = "stamen", maptype = "watercolor",
crop = FALSE)
ggmap(myMap)
crop = FALSE, zoom = 3)
myMap <- get_map(location = myLoc, source = "google", maptype = "hybrid",
crop = FALSE, zoom = 3)
ggmap(myMap)
myMap <- get_map(location = myLoc, source = "google", maptype = "hybrid",
crop = FALSE, zoom = 4)
ggmap(myMap)
myLoc <- c(lon = 40.516847, lat = -97.307456)
myMap <- get_map(location = myLoc, source = "google", maptype = "hybrid",crop = FALSE, zoom = 4)
myLoc <- c(lon = -97.307456, lat = 40.516847)
myMap <- get_map(location = myLoc, source = "google", maptype = "hybrid",crop = FALSE, zoom = 4)
ggmap(myMap)
head(us.cities)
g + geom_point(aes(x = long, y = lat, data = us.cities))
g <- ggmap(myMap)
g + geom_point(aes(x = long, y = lat, data = us.cities))
g + geom_point(aes(x = long, y = lat), data = us.cities)
g + geom_point(aes(x = long, y = lat), data = us.cities, color = "darkred")
head(us.cities)
g + geom_point(aes(x = long, y = lat), data = us.cities, color = pop)
g + geom_point(aes(x = long, y = lat), data = us.cities, color = us.cities$pop)
g + geom_point(aes(x = long, y = lat), data = us.cities, color = "darkred", size = 3)
g + geom_point(aes(x = long, y = lat), data = us.cities, color = "darkred", size = 5)
?ggmap
myMap <- get_map(location = myLoc, source = "google", maptype = "hybrid",
crop = FALSE, zoom = 4,
coord_fixed(xlim = c(-122.55, -122.40), ratio = 2/1)
)
tenmile <- get_map(location = c(lon = -122.486328, lat = 48.862813),
color = "color",
source = "google",
maptype = "roadmap",
zoom = 12)
tenmile.map <- ggmap(tenmile,
ylab = "Latitude",
xlab = "Longitude")+ggtitle("GEOMean for Data from Oct 2013-Nov 2014") +
coord_fixed(xlim = c(-122.55, -122.40), ratio = 2/1))
tenmile <- get_map(location = c(lon = -122.486328, lat = 48.862813),
color = "color",
source = "google",
maptype = "roadmap",
zoom = 12)
tenmile.map <- ggmap(tenmile,
ylab = "Latitude",
xlab = "Longitude")+ggtitle("GEOMean for Data from Oct 2013-Nov 2014") +
coord_fixed(xlim = c(-122.55, -122.40), ratio = 2/1)
tenmile.map
us.cities$pop
max(us.cities$pop)
min(us.cities$pop)
critPop <- 1000000
us.cities[us.cities$pop > critPop,]
critPop <- 1000000
ggmap(myMap) + geom_point(aes(x = long, y = lat),
data = us.cities[us.cities$pop > critPop,],
color = "darkred", size = 3)
critPop <- 100000
ggmap(myMap) + geom_point(aes(x = long, y = lat),
data = us.cities[us.cities$pop > critPop,],
color = "darkred", size = 3)
g <- ggmap(myMap)
g + geom_point(aes(x = long, y = lat),
data = us.cities[us.cities$pop > critPop,],
color = "darkred", size = 3)
critPop <- 1000000
g + geom_point(aes(x = long, y = lat),
data = us.cities[us.cities$pop > critPop,],
color = "darkred", size = 3)
critPop <- 500000
g + geom_point(aes(x = long, y = lat),
data = us.cities[us.cities$pop > critPop,],
color = "darkred", size = 3)
setwd("G:/Data Science Courses/RProjects/Data products course")
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
setwd("G:/Data Science Courses/RProjects/Data products course")
run.App
run.app()
runApp()
library(slidify)
author("course_project")
?us.cities
data(us.cities)
library(ggmap)
data(us.cities)
library(ggplot2)
data(us.cities)
library(map.cities)
library(maps)
data(us.cities)
head(us.cities)
slidify("index.Rmd")
slidify("index.Rmd")
wd
getwd()
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
author("test")
getwd()
slidify(index.Rmd)
slidify("index.Rmd")
setwd("G:/Data Science Courses/RProjects/Data products course/course_project")
slidify("index.Rmd")
session.info()
session_info()
sessionInfo()
install_version("stringr", version="0.6.2")
install_version("stringr", version="0.6.2", type = "source")
library(devtools)
slidify("index.Rmd")
install_version("stringr", version="0.6.2", type = "source")
slidify("index.Rmd")
devtools::install_github('muschellij2/slidify')
slidify("index.Rmd")
slidify("index.Rmd")
setwd("G:/Data Science Courses/RProjects/Data products course")
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("G:/Data Science Courses/RProjects/Data products course/course_project")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='aficnar',
token='957B7B26FEA084C61B01C91143308F07',
secret='<SECRET>')
library(RCurl)
install.packages("RCurl")
install.packages("RCurl")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='aficnar', token='957B7B26FEA084C61B01C91143308F07', secret='mWKECAbmarpwYrY5vHjPThO1zznh5xsQ+LnNam2v')
library(shinyapps)
shinyapps::deployApp('G:\shiny')
setwd("G:/shiny")
shinyapps::deployApp()
setwd("G:/Data Science Courses/RProjects/Data products course/course_project")
publish(title = 'DataProductsCourseProject', 'index.html', host = 'rpubs')
library(slidify)
publish(title = 'DataProductsCourseProject', 'index.html', host = 'rpubs')
library(RCurl)
publish(title = 'DataProductsCourseProject', 'index.html', host = 'rpubs')
publish_rpubs("DataProducts", html_file = "index.html")
library(slidify)
slidify("index.Rmd")
slidify("index.Rmd")
ls
slidify("index.Rmd")
setwd("G:/slidify/DataProductsProjectSlidify")
slidify("index.Rmd")
slidify("index.Rmd")
git push origin gh-pages
